using System.Collections.Generic;
using Iota.Lib.Model;
using Iota.Lib.Utils;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Iota.Lib.Test
{
    [TestClass]
    public class InputValidatorTest
    {
        const string NODE = "nodes.thetangle.org"; //Your test node; Please note that not all nodes accept the all requests
        const int PORT = 443;                      //Your test nodes's port
        const bool IS_SSL = true;                  //Your test node's encryption state

        IotaApi api = new IotaApi(NODE, PORT, IS_SSL);

        readonly string

        readonly string TEST_HASH = "OAATQS9VQLSXCLDJVJJVYUGONXAXOFMJOZNSYWRZSWECMXAQQURHQBJNLD9IOFEPGZEPEMPXCIVRX9999";

        //readonly string TEST_MESSAGE = "JOTA";
        //readonly string TEST_TAG = "JOTASPAM9999999999999999999";

        [TestMethod]
        public void TestIsStringOfTrytes()
        {
            Assert.IsTrue(InputValidator.IsStringOfTrytes(TEST_TRYTES));
            Assert.IsTrue(InputValidator.IsStringOfTrytes(TEST_HASH));
            Assert.IsTrue(InputValidator.IsStringOfTrytes("999"));
            Assert.IsFalse(InputValidator.IsStringOfTrytes(string.Empty));
            Assert.IsFalse(InputValidator.IsStringOfTrytes("AAABBBHJUZ7K"));
            Assert.IsFalse(InputValidator.IsStringOfTrytes("AAABBBHJUZ K"));
            Assert.IsFalse(InputValidator.IsStringOfTrytes("1992 AAABBB"));
        }

        [TestMethod]
        public void TestIsArrayOfValidTransactionHashes()
        {
            var list = api.GetTipsAsync().Result.Hashes;
            string invalidHash = "HUBIDIHUBIDIYALLAH667";
            Assert.IsTrue(InputValidator.IsArrayOfValidTransactionHashes(list));

            list.Add(invalidHash);
            Assert.IsFalse(InputValidator.IsArrayOfValidTransactionHashes(list));
        }

        [TestMethod]
        public void TestIsArrayOfTrytes()
        {
            var list = api.GetTipsAsync().Result.Hashes;
            string noTryteString = "HUBIDIHUBIDIYALLAH667";
            Assert.IsTrue(InputValidator.IsArrayOfTrytes(list));

            list.Add(noTryteString);
            Assert.IsFalse(InputValidator.IsArrayOfTrytes(list));
        }

        [TestMethod]
        public void TestIsValidSeed()
        {
            const string seed = "SMRUKAKOPAKXQSIKVZWQGQNKZZWL9BGEFJCIEBRJDIAGWFHUKAOSWACNC9JFDU9WHAPZBEIGWBU9VTNZS";
            const string invalidSeed = "SMRUKAKOPAKXQSIKVZWQGQNKZZWL9BGEF888888JFDU9WHAPZBEIGWBU9VTNZS";
            Assert.IsTrue(InputValidator.IsValidSeed(seed));
            Assert.IsFalse(InputValidator.IsValidSeed(invalidSeed));
        }
    }
}